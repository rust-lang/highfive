{
    "groups": {
        "all": [],
        "compiler-team": [
            "@cjgillot",
            "@estebank",
            "@petrochenkov",
            "@davidtwco",
            "@oli-obk",
            "@lcnr",
            "@michaelwoerister",
            "@nagisa",
            "@wesleywiser"
        ],
        "compiler-team-contributors": [
            "@compiler-errors",
            "@jackh726",
            "@fee1-dead"
        ],
        "compiler": [
            "compiler-team",
            "compiler-team-contributors"
        ],
        "libs": [
            "@joshtriplett",
            "@Mark-Simulacrum",
            "@kennytm",
            "@m-ou-se",
            "@thomcc"
        ],
        "bootstrap": [
          "@Mark-Simulacrum",
          "@jyn514"
        ],
        "infra-ci": [
            "@Mark-Simulacrum",
            "@kennytm",
            "@pietroalbini"
        ],
        "rustdoc": [
            "@jsha",
            "@GuillaumeGomez",
            "@CraftSpider",
            "@notriddle"
        ],
        "docs": [
            "@ehuss",
            "@GuillaumeGomez",
            "@JohnTitor"
        ],
        "query-system": [
            "@cjgillot"
        ],
        "incremental": [
            "@michaelwoerister",
            "@wesleywiser"
        ],
        "diagnostics": [
            "@compiler-errors",
            "@davidtwco",
            "@estebank",
            "@oli-obk"
        ],
        "parser": [
            "@davidtwco",
            "@estebank",
            "@petrochenkov"
        ],
        "lexer": [
            "@petrochenkov"
        ],
        "mir": [
            "@davidtwco",
            "@oli-obk"
        ],
        "mir-opt": [
            "@nagisa",
            "@oli-obk",
            "@wesleywiser"
        ],
        "types": [
            "@compiler-errors",
            "@jackh726",
            "@lcnr",
            "@oli-obk"
        ],
        "borrowck": [
            "@davidtwco",
            "@pnkfelix"
        ]
    },
    "dirs": {
        ".github/workflows":                     ["infra-ci"],
        "Cargo.lock":                            ["@Mark-Simulacrum"],
        "Cargo.toml":                            ["@Mark-Simulacrum"],
        "compiler":                              ["compiler"],
        "compiler/rustc_apfloat":                ["@eddyb"],
        "compiler/rustc_ast/":                   ["compiler", "parser"],
        "compiler/rustc_lexer":                  ["compiler", "lexer"],
        "compiler/rustc_llvm":                   ["@cuviper"],
        "compiler/rustc_middle/src/mir":         ["compiler", "mir"],
        "compiler/rustc_middle/src/traits":      ["compiler", "types"],
        "compiler/rustc_mir/src/interpret":      ["compiler", "mir"],
        "compiler/rustc_mir/src/transform":      ["compiler", "mir-opt"],
        "compiler/rustc_mir_build/src/build":    ["compiler", "mir"],
        "compiler/rustc_typeck":                 ["compiler", "types"],
        "compiler/rustc_traits":                 ["compiler", "types"],
        "compiler/rustc_trait_selection":        ["compiler", "types"],
        "compiler/rustc_type_ir":                ["compiler", "types"],
        "compiler/rustc_parse":                  ["compiler", "parser"],
        "compiler/rustc_parse/src/parse/lexer/": ["compiler", "lexer"],
        "compiler/rustc_query_impl":             ["compiler", "query-system"],
        "compiler/rustc_query_system":           ["compiler", "query-system"],
        "library/alloc":                         ["libs"],
        "library/core":                          ["libs", "@scottmcm"],
        "library/panic_abort":                   ["libs"],
        "library/panic_unwind":                  ["libs"],
        "library/proc_macro":                    ["@petrochenkov"],
        "library/std":                           ["libs"],
        "library/std/src/sys/windows":           ["@ChrisDenton"],
        "library/stdarch":                       ["libs"],
        "library/term":                          ["libs"],
        "library/test":                          ["libs"],
        "src/bootstrap":                         ["bootstrap"],
        "src/ci":                                ["infra-ci"],
        "src/etc":                               ["@Mark-Simulacrum"],
        "src/librustdoc":                        ["rustdoc"],
        "src/llvm-project":                      ["@cuviper"],
        "src/stage0.json":                       ["bootstrap"],
        "src/tools/cargo":                       ["@ehuss", "@joshtriplett"],
        "src/tools/compiletest":                 ["bootstrap"],
        "src/tools/linkchecker":                 ["@ehuss"],
        "src/tools/rust-installer":              ["bootstrap"],
        "src/tools/rustbook":                    ["@ehuss"],
        "src/tools/rustdoc":                     ["rustdoc"],
        "src/tools/rustdoc-js":                  ["rustdoc"],
        "src/tools/rustdoc-js-std":              ["rustdoc"],
        "src/tools/rustdoc-themes":              ["rustdoc"],
        "src/tools/tidy":                        ["bootstrap"],
        "src/doc":                               ["docs"],
        "src/doc/rustdoc":                       ["rustdoc"]
    },
    "mentions": {
        "library/portable-simd": {
            "message": "library/portable-simd is a subtree of https://github.com/rust-lang/portable-simd and changes here will have to be cherry-picked upstream.",
            "reviewers": ["@rust-lang/project-portable-simd"]
        },
        "src/rustdoc-json-types": {
          "message": "rustdoc-json-types is a **public** (although nightly-only) API. If possible, consider changing `src/librustdoc/json/conversions.rs`; otherwise, make sure you bump the `FORMAT_VERSION` constant.",
          "reviewers": ["@CraftSpider", "@aDotInTheVoid"]
        },
        "src/librustdoc/clean/types.rs": {
            "message": "Some changes occurred in `clean/types.rs`.",
            "reviewers": ["@camelid"]
        },
        "src/librustdoc/html/static": {
            "message": "Some changes occurred in HTML/CSS/JS.",
            "reviewers": ["@GuillaumeGomez", "@Folyd", "@jsha"]
        },
        "src/librustdoc/html/static/themes": {
            "message": "Some changes occurred in HTML/CSS themes.",
            "reviewers": ["@GuillaumeGomez"]
        },
        "src/librustdoc/html/static/themes/ayu.css": {
            "message": "A change occurred in the Ayu theme.",
            "reviewers": ["@Cldfire"]
        },
        "error_codes.rs": {
            "message": "Some changes occurred in diagnostic error codes",
            "reviewers": ["@GuillaumeGomez"]
        },
        "src/tools/cargo": {
            "message": "Updates src/tools/cargo.",
            "reviewers": ["@ehuss"]
        },
        "compiler/rustc_apfloat": {
            "message": "Changes rustc_apfloat. rustc_apfloat is currently in limbo and you almost certainly don't want to change it (see #55993).",
            "reviewers": ["@eddyb"]
        },
        "compiler/rustc_codegen_cranelift": {
            "message": "Some changes occured to rustc_codegen_cranelift",
            "reviewers": ["@bjorn3"]
        },
        "compiler/rustc_codegen_gcc": {
            "message": "Some changes occured to rustc_codegen_gcc",
            "reviewers": ["@antoyo"]
        },
        "src/tools/rustfmt": {
            "message": "Some changes occurred in src/tools/rustfmt.",
            "reviewers": ["@rust-lang/rustfmt"]
        },
        "src/tools/clippy": {
            "message": "Some changes occurred in src/tools/clippy.",
            "reviewers": ["@rust-lang/clippy"]
        },
        "compiler/rustc_const_eval/src/interpret": {
            "message": "Some changes occured to the CTFE / Miri engine",
            "reviewers": ["@rust-lang/miri"]
        },
        "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs": {
            "message": "Some changes occured in need_type_info.rs",
            "reviewers": ["@lcnr"]
        },
        "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs": {
            "message": "Some changes occured in const_evaluatable.rs",
            "reviewers": ["@lcnr"]
        },
        "compiler/rustc_middle/src/mir/interpret": {
            "message": "Some changes occured to the CTFE / Miri engine",
            "reviewers": ["@rust-lang/miri"]
        },
        "src/tools/miri": {
            "message": "Some changes occured to the Miri submodule",
            "reviewers": ["@rust-lang/miri"]
        },
        "compiler/rustc_mir_transform/src/": {
            "message": "Some changes occured to MIR optimizations",
            "reviewers": ["@rust-lang/mir-opt"]
        },
        "library": {
            "message": "Hey! It looks like you've submitted a new PR for the library teams!\n\nIf this PR contains changes to any `rust-lang/rust` public library APIs then please comment with `@rustbot label +T-libs-api -T-libs` to tag it appropriately. If this PR contains changes to any unstable APIs please edit the PR description to add a link to the relevant [API Change Proposal](https://std-dev-guide.rust-lang.org/feature-lifecycle/api-change-proposals.html) or [create one](https://github.com/rust-lang/libs-team/issues/new?assignees=&labels=api-change-proposal%2C+T-libs-api&template=api-change-proposal.md&title=%28My+API+Change+Proposal%29) if you haven't already. If you're unsure where your change falls no worries, just leave it as is and the reviewer will take a look and make a decision to forward on if necessary.\n\nExamples of `T-libs-api` changes:\n\n* Stabilizing library features\n* Introducing insta-stable changes such as new implementations of existing stable traits on existing stable types\n* Introducing new or changing existing unstable library APIs (excluding permanently unstable features / features without a tracking issue)\n* Changing public documentation in ways that create new stability guarantees\n* Changing observable runtime behavior of library APIs",
            "reviewers": []
        }
    },
    "new_pr_labels": ["S-waiting-on-review"]
}
